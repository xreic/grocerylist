{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport Cookies from 'js-cookie';\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphiql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = Cookies.get('grocerylist_auth_token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, token ? {\n      authorization: `Bearer ${token}`\n    } : {})\n  };\n});\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    addTypename: false,\n    ssrMode: Boolean(ctx),\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      addTypename: false\n    })\n  });\n}","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/apolloClient.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","Cookies","httpLink","uri","authLink","_","headers","token","get","authorization","createApolloClient","initialState","ctx","addTypename","ssrMode","Boolean","link","concat","cache"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGN,OAAO,CAACO,GAAR,CAAY,wBAAZ,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLF,IAAAA,OAAO,oBACDC,KAAK,GAAG;AAAEE,MAAAA,aAAa,EAAG,UAASF,KAAM;AAAjC,KAAH,GAA0C,EAD9C;AADF,GAAP;AAKD,CAT0B,CAA3B;AAWA,eAAe,SAASG,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AACA,SAAO,IAAIf,YAAJ,CAAiB;AACtBgB,IAAAA,WAAW,EAAE,KADS;AAEtBC,IAAAA,OAAO,EAAEC,OAAO,CAACH,GAAD,CAFM;AAGtBI,IAAAA,IAAI,EAAEZ,QAAQ,CAACa,MAAT,CAAgBf,QAAhB,CAHgB;AAItBgB,IAAAA,KAAK,EAAE,IAAIpB,aAAJ,CAAkB;AACvBe,MAAAA,WAAW,EAAE;AADU,KAAlB;AAJe,GAAjB,CAAP;AAQD","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:4000/graphiql'\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = Cookies.get('grocerylist_auth_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...(token ? { authorization: `Bearer ${token}` } : {})\r\n    }\r\n  };\r\n});\r\n\r\nexport default function createApolloClient(initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n  return new ApolloClient({\r\n    addTypename: false,\r\n    ssrMode: Boolean(ctx),\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache({\r\n      addTypename: false\r\n    })\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}