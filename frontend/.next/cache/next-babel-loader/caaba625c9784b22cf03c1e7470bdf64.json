{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport Cookies from 'js-cookie';\n/**\r\n * Artificial delay to test optimistic updates\r\n * Set \"link\" to \"authLink.concat(delay).concat(httpLink)\"\r\n */\n\nvar delay = setContext(function (request) {\n  return new Promise(function (success, fail) {\n    setTimeout(function () {\n      success();\n    }, 1000);\n  });\n}); // Add \"/graphql\" for express + postgraphile\n\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n}); // Used to set the headers\n\nvar authLink = setContext( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var token;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // Attempt to retrieve the JWT\n          token = Cookies.get('grocerylist_auth_token'); // Applies the headers with the JWT if the JWT exists\n\n          return _context.abrupt(\"return\", {\n            headers: _objectSpread({}, token !== undefined ? {\n              authorization: \"Bearer \".concat(token)\n            } : {})\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    // includeExtensions: true,\n    // addTypename: false,\n    ssrMode: Boolean(ctx),\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      addTypename: false\n    })\n  });\n}","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/apolloClient.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","Cookies","delay","request","Promise","success","fail","setTimeout","httpLink","uri","authLink","token","get","headers","undefined","authorization","createApolloClient","initialState","ctx","ssrMode","Boolean","link","concat","cache","addTypename"],"mappings":";;;;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;;AAIA,IAAMC,KAAK,GAAGF,UAAU,CACtB,UAACG,OAAD;AAAA,SACE,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,IAAV,EAAmB;AAC7BC,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,OAAO;AACR,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD,CADF;AAAA,CADsB,CAAxB,C,CASA;;AACA,IAAMG,QAAQ,GAAGT,cAAc,CAAC;AAC9BU,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B,C,CAIA;;AACA,IAAMC,QAAQ,GAAGV,UAAU,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1B;AACMW,UAAAA,KAFoB,GAEZV,OAAO,CAACW,GAAR,CAAY,wBAAZ,CAFY,EAG1B;;AAH0B,2CAInB;AACLC,YAAAA,OAAO,oBACDF,KAAK,KAAKG,SAAV,GAAsB;AAAEC,cAAAA,aAAa,mBAAYJ,KAAZ;AAAf,aAAtB,GAA6D,EAD5D;AADF,WAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,GAA3B;AAWA,eAAe,SAASK,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AACA,SAAO,IAAIrB,YAAJ,CAAiB;AACtB;AACA;AACAsB,IAAAA,OAAO,EAAEC,OAAO,CAACF,GAAD,CAHM;AAItBG,IAAAA,IAAI,EAAEX,QAAQ,CAACY,MAAT,CAAgBd,QAAhB,CAJgB;AAKtBe,IAAAA,KAAK,EAAE,IAAIzB,aAAJ,CAAkB;AACvB0B,MAAAA,WAAW,EAAE;AADU,KAAlB;AALe,GAAjB,CAAP;AASD","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport Cookies from 'js-cookie';\r\n\r\n/**\r\n * Artificial delay to test optimistic updates\r\n * Set \"link\" to \"authLink.concat(delay).concat(httpLink)\"\r\n */\r\nconst delay = setContext(\r\n  (request) =>\r\n    new Promise((success, fail) => {\r\n      setTimeout(() => {\r\n        success();\r\n      }, 1000);\r\n    })\r\n);\r\n\r\n// Add \"/graphql\" for express + postgraphile\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:4000/graphql'\r\n});\r\n\r\n// Used to set the headers\r\nconst authLink = setContext(async () => {\r\n  // Attempt to retrieve the JWT\r\n  const token = Cookies.get('grocerylist_auth_token');\r\n  // Applies the headers with the JWT if the JWT exists\r\n  return {\r\n    headers: {\r\n      ...(token !== undefined ? { authorization: `Bearer ${token}` } : {})\r\n    }\r\n  };\r\n});\r\n\r\nexport default function createApolloClient(initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n  return new ApolloClient({\r\n    // includeExtensions: true,\r\n    // addTypename: false,\r\n    ssrMode: Boolean(ctx),\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache({\r\n      addTypename: false\r\n    })\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}