{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// Dependencies\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport Router from 'next/router';\nimport { useMutation } from '@apollo/react-hooks';\nimport Cookies from 'js-cookie'; // Styles\n\nimport { Button, Flex, InputGroup, InputRightElement, SimpleGrid, Stack, useToast } from '@chakra-ui/core';\nimport { AiOutlineForm, AiOutlineDoubleLeft } from 'react-icons/ai';\nimport { FiLogIn } from 'react-icons/fi';\nimport { StyledButton, StyledInput, StyledInputPW } from './styles/styled'; // Helpers\n\nimport { REGISTER_USER_MUTATION, SIGNIN_USER_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Contexts\n\nimport { UserContext } from '../lib/React/UserContext';\n\nconst SignInForm = () => {\n  // Form Refs\n  const emailRef = useRef('');\n  const nameRef = useRef('');\n  const passwordRef = useRef('');\n  const passwordConfirmationRef = useRef(''); // Hooks\n\n  const toast = useToast();\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const {\n    0: isCalling,\n    1: setIsCalling\n  } = useState(false);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState('');\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n  const {\n    0: isRegistering,\n    1: setIsRegistering\n  } = useState(false); // Apollo\n\n  const [register, registerRes] = useMutation(REGISTER_USER_MUTATION);\n  const [signin, signinRes] = useMutation(SIGNIN_USER_MUTATION); // useEffect\n\n  useEffect(() => {\n    if (user) Router.push('/');\n  }, [user]); // Handlers\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleRegister = () => {\n    setIsError('');\n    setIsRegistering(!isRegistering);\n  };\n\n  const handleSubmit = async e => {\n    setIsError('');\n    setIsCalling(true);\n    e.preventDefault();\n    const email = emailRef.current.value;\n    const password = passwordRef.current.value;\n\n    try {\n      if (isRegistering) {\n        const displayname = nameRef.current.value;\n        const confirmpassword = passwordConfirmationRef === null || passwordConfirmationRef === void 0 ? void 0 : passwordConfirmationRef.current.value;\n        await register({\n          variables: {\n            input: {\n              email,\n              displayname,\n              password,\n              confirmpassword\n            }\n          }\n        });\n      }\n\n      const tokenRes = await signin({\n        variables: {\n          input: {\n            email,\n            password\n          }\n        }\n      }); // No cookies are set on an invalid login\n\n      Cookies.set('grocerylist_auth_token', tokenRes.data.authenticate.jwtToken);\n      setIsCalling(false);\n      setIsRegistering(false);\n      setUser(!!Cookies.get('grocerylist_auth_token'));\n    } catch (error) {\n      setIsCalling(false);\n      toast({\n        description: doctorError(error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  };\n\n  return __jsx(Stack, {\n    spacing: \"0.5rem\",\n    paddingBottom: \"2rem\"\n  }, __jsx(Flex, {\n    justify: \"center\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    minWidth: \"300px\",\n    maxWidth: \"400px\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(StyledInput, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    ref: emailRef,\n    isDisabled: isCalling,\n    isRequired: true\n  }), isRegistering && __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Enter display name\",\n    ref: nameRef,\n    isDisabled: isCalling,\n    isRequired: true\n  }), __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Enter password\",\n    ref: passwordRef,\n    isDisabled: isCalling,\n    isRequired: true,\n    error: isError\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: togglePassword\n  }, showPassword ? 'Hide' : 'Show'))), isRegistering && __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Confirm password\",\n    ref: passwordConfirmationRef,\n    isDisabled: isCalling,\n    isRequired: true,\n    error: isError\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: togglePassword\n  }, showPassword ? 'Hide' : 'Show'))), __jsx(SimpleGrid, {\n    columns: \"2\",\n    gridGap: \"5px\"\n  }, __jsx(StyledButton, {\n    variantColor: \"blue\",\n    icon: isRegistering ? AiOutlineDoubleLeft : AiOutlineForm,\n    isLoading: isCalling,\n    isDisabled: isCalling,\n    \"aira-busy\": isCalling,\n    \"aria-label\": \"Register for an account\",\n    onClick: toggleRegister\n  }), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: FiLogIn,\n    isLoading: isCalling,\n    isDisabled: isCalling,\n    \"aira-busy\": isCalling,\n    \"aria-label\": \"Log into your account\"\n  })))));\n};\n\nexport default SignInForm;","map":null,"metadata":{},"sourceType":"module"}