{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport Cookies from 'js-cookie';\n/**\r\n * Artificial delay to test optimistic updates\r\n * Set \"link\" to \"authLink.concat(delay).concat(httpLink)\"\r\n */\n\nvar delay = setContext(function (request) {\n  return new Promise(function (success, fail) {\n    setTimeout(function () {\n      success();\n    }, 1000);\n  });\n}); // Add \"/graphql\" for express + postgraphile\n\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n}); // Used to set the headers\n\nvar authLink = setContext(function () {\n  // Attempt to retrieve the JWT\n  var token = Cookies.get('grocerylist_auth_token'); // Applies the headers with the JWT if the JWT exists\n\n  return {\n    headers: _objectSpread({}, token !== undefined ? {\n      authorization: \"Bearer \".concat(token)\n    } : {})\n  };\n});\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    // includeExtensions: true,\n    // addTypename: false,\n    ssrMode: Boolean(ctx),\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      addTypename: false\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}