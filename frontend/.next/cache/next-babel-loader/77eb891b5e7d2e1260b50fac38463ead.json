{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependencies\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport Router from 'next/router';\nimport { useMutation } from '@apollo/react-hooks';\nimport Cookies from 'js-cookie'; // Styles\n\nimport { Button, Flex, InputGroup, InputRightElement, SimpleGrid, Stack, useToast } from '@chakra-ui/core';\nimport { AiOutlineForm, AiOutlineDoubleLeft } from 'react-icons/ai';\nimport { FiLogIn } from 'react-icons/fi';\nimport { StyledButton, StyledInput, StyledInputPW } from './styles/styled'; // Helpers\n\nimport { REGISTER_USER_MUTATION, SIGNIN_USER_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Contexts\n\nimport { UserContext } from '../lib/React/UserContext';\n\nvar SignInForm = function SignInForm() {\n  // Form Refs\n  var emailRef = useRef('');\n  var nameRef = useRef('');\n  var passwordRef = useRef('');\n  var passwordConfirmationRef = useRef(''); // Hooks\n\n  var toast = useToast();\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState(false),\n      isCalling = _useState[0],\n      setIsCalling = _useState[1];\n\n  var _useState2 = useState(''),\n      isError = _useState2[0],\n      setIsError = _useState2[1];\n\n  var _useState3 = useState(false),\n      showPassword = _useState3[0],\n      setShowPassword = _useState3[1];\n\n  var _useState4 = useState(false),\n      isRegistering = _useState4[0],\n      setIsRegistering = _useState4[1]; // Apollo\n\n\n  var _useMutation = useMutation(REGISTER_USER_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      register = _useMutation2[0],\n      registerRes = _useMutation2[1];\n\n  var _useMutation3 = useMutation(SIGNIN_USER_MUTATION),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      signin = _useMutation4[0],\n      signinRes = _useMutation4[1]; // useEffect\n\n\n  useEffect(function () {\n    if (user) Router.push('/');\n  }, [user]); // Handlers\n\n  var togglePassword = function togglePassword() {\n    setShowPassword(!showPassword);\n  };\n\n  var toggleRegister = function toggleRegister() {\n    setIsError('');\n    setIsRegistering(!isRegistering);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var email, password, displayname, confirmpassword, tokenRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsError('');\n              setIsCalling(true);\n              e.preventDefault();\n              email = emailRef.current.value;\n              password = passwordRef.current.value;\n              _context.prev = 5;\n\n              if (!isRegistering) {\n                _context.next = 11;\n                break;\n              }\n\n              displayname = nameRef.current.value;\n              confirmpassword = passwordConfirmationRef === null || passwordConfirmationRef === void 0 ? void 0 : passwordConfirmationRef.current.value;\n              _context.next = 11;\n              return register({\n                variables: {\n                  input: {\n                    email: email,\n                    displayname: displayname,\n                    password: password,\n                    confirmpassword: confirmpassword\n                  }\n                }\n              });\n\n            case 11:\n              _context.next = 13;\n              return signin({\n                variables: {\n                  input: {\n                    email: email,\n                    password: password\n                  }\n                }\n              });\n\n            case 13:\n              tokenRes = _context.sent;\n              // No cookies are set on an invalid login\n              Cookies.set('grocerylist_auth_token', tokenRes.data.authenticate.jwtToken);\n              setIsCalling(false);\n              setIsRegistering(false);\n              setUser(!!Cookies.get('grocerylist_auth_token'));\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](5);\n              setIsCalling(false);\n              toast({\n                description: doctorError(_context.t0.message),\n                status: 'error',\n                duration: 9001,\n                isClosable: true\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 20]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Stack, {\n    spacing: \"0.5rem\",\n    paddingBottom: \"2rem\"\n  }, __jsx(Flex, {\n    justify: \"center\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    minWidth: \"300px\",\n    maxWidth: \"400px\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(StyledInput, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    ref: emailRef,\n    isDisabled: isCalling,\n    isRequired: true\n  }), isRegistering && __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Enter display name\",\n    ref: nameRef,\n    isDisabled: isCalling,\n    isRequired: true\n  }), __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Enter password\",\n    ref: passwordRef,\n    isDisabled: isCalling,\n    isRequired: true,\n    error: isError\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: togglePassword\n  }, showPassword ? 'Hide' : 'Show'))), isRegistering && __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Confirm password\",\n    ref: passwordConfirmationRef,\n    isDisabled: isCalling,\n    isRequired: true,\n    error: isError\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: togglePassword\n  }, showPassword ? 'Hide' : 'Show'))), __jsx(SimpleGrid, {\n    columns: \"2\",\n    gridGap: \"5px\"\n  }, __jsx(StyledButton, {\n    variantColor: \"blue\",\n    icon: isRegistering ? AiOutlineDoubleLeft : AiOutlineForm,\n    isLoading: isCalling,\n    isDisabled: isCalling,\n    \"aira-busy\": isCalling,\n    \"aria-label\": \"Register for an account\",\n    onClick: toggleRegister\n  }), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: FiLogIn,\n    isLoading: isCalling,\n    isDisabled: isCalling,\n    \"aira-busy\": isCalling,\n    \"aria-label\": \"Log into your account\"\n  })))));\n};\n\nexport default SignInForm;","map":null,"metadata":{},"sourceType":"module"}