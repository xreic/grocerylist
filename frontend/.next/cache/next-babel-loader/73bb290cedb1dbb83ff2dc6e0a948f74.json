{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { ALL_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\ndoctor; // Styles\n\nimport { Heading, Skeleton, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // Components\n\nimport Item from './Item';\n\nconst GroceryList = () => {\n  // Hooks\n  const toast = useToast(); // Apollo\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, {\n      data: {\n        deleteItem\n      }\n    }) {\n      const {\n        items: {\n          nodes\n        }\n      } = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      });\n      const {\n        id\n      } = deleteItem.item;\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data: {\n          items: {\n            nodes: nodes.filter(node => node.id !== id)\n          }\n        }\n      });\n    }\n\n  }); // Handlers\n\n  const handleClick = async id => {\n    try {\n      await deleteItem({\n        variables: {\n          input: {\n            id\n          }\n        }\n      });\n    } catch (error) {// toast({\n      //   description: JSON.stringify(error),\n      //   status: 'error',\n      //   duration: '9001',\n      //   isClosable: 'true'\n      // });\n      // console.log('error');\n      // console.log(error);\n    }\n  };\n\n  if (error || deleteResponse) {\n    console.log('error:', error);\n    if (!!deleteResponse.error) toast({\n      description: JSON.stringify(deleteResponse.error.message),\n      status: 'error',\n      duration: 9001,\n      isClosable: true\n    }); // console.log(JSON.stringify(deleteResponse.error.message));\n  }\n\n  if (loading) return __jsx(Stack, {\n    width: \"60%\",\n    maxWidth: \"500px\",\n    minWidth: \"300px\",\n    margin: \"auto\",\n    spacing: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Loading\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"));\n\n  if (data.items.nodes.length) {\n    const list = data.items.nodes;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, \"Quantity\")), __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, list.map(item => __jsx(Item, {\n      key: item.id + item.product,\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      handleClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    })))));\n  } else {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\"));\n  }\n};\n\nexport default GroceryList;","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useMutation","useQuery","ALL_ITEMS_QUERY","REMOVE_ITEM_MUTATION","doctor","Heading","Skeleton","SimpleGrid","Stack","useToast","Item","GroceryList","toast","data","loading","error","deleteItem","deleteResponse","update","cache","items","nodes","readQuery","query","id","item","writeQuery","filter","node","handleClick","variables","input","console","log","description","JSON","stringify","message","status","duration","isClosable","length","list","map","product","quantity"],"mappings":"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","sourcesContent":["// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\n// Helpers\nimport { ALL_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\ndoctor\n\n// Styles\nimport {\n  Heading,\n  Skeleton,\n  SimpleGrid,\n  Stack,\n  useToast\n} from '@chakra-ui/core';\n\n// Components\nimport Item from './Item';\n\nconst GroceryList = () => {\n  // Hooks\n  const toast = useToast();\n\n  // Apollo\n  const { data, loading, error } = useQuery(ALL_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, { data: { deleteItem } }) {\n      const {\n        items: { nodes }\n      } = cache.readQuery({ query: ALL_ITEMS_QUERY });\n\n      const { id } = deleteItem.item;\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data: { items: { nodes: nodes.filter((node) => node.id !== id) } }\n      });\n    }\n  });\n\n  // Handlers\n  const handleClick = async (id) => {\n    try {\n      await deleteItem({ variables: { input: { id } } });\n    } catch (error) {\n      // toast({\n      //   description: JSON.stringify(error),\n      //   status: 'error',\n      //   duration: '9001',\n      //   isClosable: 'true'\n      // });\n      // console.log('error');\n      // console.log(error);\n    }\n  };\n\n  if (error || deleteResponse) {\n    console.log('error:', error);\n\n    if (!!deleteResponse.error)\n      toast({\n        description: JSON.stringify(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n\n    // console.log(JSON.stringify(deleteResponse.error.message));\n  }\n\n  if (loading)\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <Heading as=\"h4\" size=\"lg\">\n          Loading\n        </Heading>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n      </Stack>\n    );\n\n  if (data.items.nodes.length) {\n    const list = data.items.nodes;\n\n    return (\n      <React.Fragment>\n        <Stack\n          width=\"60%\"\n          maxWidth=\"500px\"\n          minWidth=\"300px\"\n          margin=\"auto\"\n          spacing=\"0.5rem\"\n        >\n          <SimpleGrid columns=\"3\">\n            <Heading as=\"h4\" size=\"lg\">\n              Item\n            </Heading>\n            <Heading as=\"h4\" size=\"lg\">\n              Quantity\n            </Heading>\n          </SimpleGrid>\n          <SimpleGrid columns=\"3\">\n            {list.map((item) => (\n              <Item\n                key={item.id + item.product}\n                id={item.id}\n                product={item.product}\n                quantity={item.quantity}\n                handleClick={handleClick}\n              />\n            ))}\n          </SimpleGrid>\n        </Stack>\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <Heading as=\"h4\" size=\"lg\">\n          Remember to add to your list. 📝\n        </Heading>\n      </React.Fragment>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}