{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Dependencies\nimport { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks'; // Styles\n\nimport { Box, Flex, Grid } from '@chakra-ui/core';\nimport { MdAddShoppingCart } from 'react-icons/md'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { ADD_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { StyledButton, StyledInput } from './styles/styled';\n\nvar GroceryForm = function GroceryForm() {\n  // Form Refs\n  var productRef = useRef('');\n  var quantityRef = useRef(''); // Hooks\n\n  var _useState = useState(false),\n      isCalling = _useState[0],\n      setIsCalling = _useState[1]; // Apollo\n\n\n  var _useMutation = useMutation(ADD_ITEM_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addItem = _useMutation2[0]; // Handlers\n\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    setIsCalling(true);\n    var input = {\n      product: productRef.current.value,\n      quantity: parseInt(quantityRef.current.value)\n    };\n    addItem({\n      variables: {\n        input: input\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        addItem: {\n          item: _objectSpread({\n            id: Math.round(Math.random() * -1000000)\n          }, input)\n        }\n      },\n      update: function update(cache, _ref) {\n        var addItem = _ref.data.addItem;\n\n        var _cache$readQuery = cache.readQuery({\n          query: USERS_ITEMS_QUERY\n        }),\n            currentUserItems = _cache$readQuery.currentUserItems;\n\n        var nodes = currentUserItems.nodes;\n        var item = addItem.item;\n        cache.writeQuery({\n          query: USERS_ITEMS_QUERY,\n          data: {\n            currentUserItems: {\n              nodes: [item].concat(_toConsumableArray(nodes))\n            }\n          }\n        });\n      }\n    });\n    setIsCalling(false);\n    productRef.current.value = '';\n    quantityRef.current.value = '';\n    productRef.current.focus();\n  };\n\n  return __jsx(Flex, {\n    justify: \"center\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    templateColumns: \"5fr 1fr\"\n  }, __jsx(Box, null, __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Product\",\n    isDisabled: isCalling,\n    ref: productRef,\n    isRequired: true\n  }), __jsx(StyledInput, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    isDisabled: isCalling,\n    ref: quantityRef,\n    isRequired: true\n  })), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: MdAddShoppingCart,\n    isLoading: isCalling,\n    isDisabled: isCalling,\n    \"aira-busy\": isCalling,\n    \"aira-label\": \"Add into to your grocery list\",\n    height: true\n  }))));\n};\n\nexport default GroceryForm;","map":null,"metadata":{},"sourceType":"module"}