{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Styles\n\nimport { Heading, Skeleton, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // Components\n\nimport Item from './Item';\n\nvar GroceryList = function GroceryList() {\n  _s();\n\n  var _data$currentUser;\n\n  // Hooks\n  var toast = useToast(); // Apollo\n\n  var _useQuery = useQuery(USERS_ITEMS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(REMOVE_ITEM_MUTATION, {\n    update: function update(cache, _ref) {\n      var deleteItem = _ref.data.deleteItem;\n\n      var _cache$readQuery = cache.readQuery({\n        query: USERS_ITEMS_QUERY\n      }),\n          nodes = _cache$readQuery.currentUser.itemsByOwnerId.nodes;\n\n      console.log('nodes');\n      console.log(nodes);\n      var id = deleteItem.item.id;\n      cache.writeQuery({\n        query: USERS_ITEMS_QUERY,\n        data: {\n          currentUser: {\n            itemsByOwnerId: {\n              nodes: nodes.filter(function (node) {\n                return node.id !== id;\n              })\n            }\n          }\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      deleteItem = _useMutation2[0],\n      deleteResponse = _useMutation2[1]; // Handlers\n\n\n  var handleClick = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log('id');\n              console.log(id);\n              _context.next = 5;\n              return deleteItem({\n                variables: {\n                  input: {\n                    id: id\n                  }\n                }\n              });\n\n            case 5:\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function handleClick(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading) return __jsx(Stack, {\n    width: \"60%\",\n    maxWidth: \"500px\",\n    minWidth: \"300px\",\n    margin: \"auto\",\n    spacing: \"0.5rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    size: \"lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Loading\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"));\n\n  if ((_data$currentUser = data.currentUser) === null || _data$currentUser === void 0 ? void 0 : _data$currentUser.itemsByOwnerId.nodes.length) {\n    var list = data.currentUser.itemsByOwnerId.nodes;\n    return __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Quantity\")), __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, list.map(function (item) {\n      return __jsx(Item, {\n        key: item.id + item.product,\n        id: item.id,\n        product: item.product,\n        quantity: item.quantity,\n        handleClick: handleClick,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      });\n    })));\n  } else {\n    return __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\");\n  }\n};\n\n_s(GroceryList, \"SxsF5+CrUtyLlROyEE7idLGeblo=\", false, function () {\n  return [useToast, useQuery, useMutation];\n});\n\n_c = GroceryList;\nexport default GroceryList;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroceryList\");","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useMutation","useQuery","USERS_ITEMS_QUERY","REMOVE_ITEM_MUTATION","doctorError","Heading","Skeleton","SimpleGrid","Stack","useToast","Item","GroceryList","toast","data","loading","error","update","cache","deleteItem","readQuery","query","nodes","currentUser","itemsByOwnerId","console","log","id","item","writeQuery","filter","node","deleteResponse","handleClick","variables","input","description","status","duration","isClosable","message","length","list","map","product","quantity"],"mappings":"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","sourcesContent":["// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\n// Helpers\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError';\n\n// Styles\nimport {\n  Heading,\n  Skeleton,\n  SimpleGrid,\n  Stack,\n  useToast\n} from '@chakra-ui/core';\n\n// Components\nimport Item from './Item';\n\nconst GroceryList = () => {\n  // Hooks\n  const toast = useToast();\n\n  // Apollo\n  const { data, loading, error } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, { data: { deleteItem } }) {\n      const {\n        currentUser: {\n          itemsByOwnerId: { nodes }\n        }\n      } = cache.readQuery({ query: USERS_ITEMS_QUERY });\n\n      console.log('nodes');\n      console.log(nodes);\n\n      const { id } = deleteItem.item;\n      cache.writeQuery({\n        query: USERS_ITEMS_QUERY,\n        data: {\n          currentUser: {\n            itemsByOwnerId: { nodes: nodes.filter((node) => node.id !== id) }\n          }\n        }\n      });\n    }\n  });\n\n  // Handlers\n  const handleClick = async (id) => {\n    try {\n      console.log('id');\n      console.log(id);\n      await deleteItem({ variables: { input: { id } } });\n    } catch (error) {\n      // need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading)\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <Heading as=\"h4\" size=\"lg\">\n          Loading\n        </Heading>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n      </Stack>\n    );\n\n  if (data.currentUser?.itemsByOwnerId.nodes.length) {\n    const list = data.currentUser.itemsByOwnerId.nodes;\n\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <SimpleGrid columns=\"3\">\n          <Heading as=\"h4\" size=\"lg\">\n            Item\n          </Heading>\n          <Heading as=\"h4\" size=\"lg\">\n            Quantity\n          </Heading>\n        </SimpleGrid>\n        <SimpleGrid columns=\"3\">\n          {list.map((item) => (\n            <Item\n              key={item.id + item.product}\n              id={item.id}\n              product={item.product}\n              quantity={item.quantity}\n              handleClick={handleClick}\n            />\n          ))}\n        </SimpleGrid>\n      </Stack>\n    );\n  } else {\n    return (\n      <Heading as=\"h4\" size=\"lg\">\n        Remember to add to your list. 📝\n      </Heading>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}