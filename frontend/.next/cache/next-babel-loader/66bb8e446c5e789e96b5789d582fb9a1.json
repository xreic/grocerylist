{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport Cookies from 'js-cookie';\n\nconst getToken = () => {\n  console.log(Cookies.get('grocerylist_auth_token'));\n  return Cookies.get('grocerylist_auth_token') ? Cookies.get('grocerylist_auth_token') : false;\n};\n\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      // includeExtensions: true,\n      uri: 'http://localhost:4000/graphiql',\n      // Server URL (must be absolute)\n      headers: _objectSpread(_objectSpread({}, headers), token ? {\n        authorization: `Bearer ${token}`\n      } : {})\n    }),\n    cache: new InMemoryCache({\n      addTypename: false\n    })\n  });\n}","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/apolloClient.js"],"names":["ApolloClient","InMemoryCache","HttpLink","setContext","Cookies","getToken","console","log","get","createApolloClient","initialState","ctx","ssrMode","Boolean","link","uri","headers","token","authorization","cache","addTypename"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,GAAR,CAAY,wBAAZ,CAAZ;AACA,SAAOJ,OAAO,CAACI,GAAR,CAAY,wBAAZ,IACHJ,OAAO,CAACI,GAAR,CAAY,wBAAZ,CADG,GAEH,KAFJ;AAGD,CALD;;AAOA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AACA,SAAO,IAAIX,YAAJ,CAAiB;AACtBY,IAAAA,OAAO,EAAEC,OAAO,CAACF,GAAD,CADM;AAEtBG,IAAAA,IAAI,EAAE,IAAIZ,QAAJ,CAAa;AACjB;AACAa,MAAAA,GAAG,EAAE,gCAFY;AAEsB;AACvCC,MAAAA,OAAO,kCACFA,OADE,GAEDC,KAAK,GAAG;AAAEC,QAAAA,aAAa,EAAG,UAASD,KAAM;AAAjC,OAAH,GAA0C,EAF9C;AAHU,KAAb,CAFgB;AAUtBE,IAAAA,KAAK,EAAE,IAAIlB,aAAJ,CAAkB;AACvBmB,MAAAA,WAAW,EAAE;AADU,KAAlB;AAVe,GAAjB,CAAP;AAcD","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst getToken = () => {\r\n  console.log(Cookies.get('grocerylist_auth_token'));\r\n  return Cookies.get('grocerylist_auth_token')\r\n    ? Cookies.get('grocerylist_auth_token')\r\n    : false;\r\n};\r\n\r\nexport default function createApolloClient(initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n  return new ApolloClient({\r\n    ssrMode: Boolean(ctx),\r\n    link: new HttpLink({\r\n      // includeExtensions: true,\r\n      uri: 'http://localhost:4000/graphiql', // Server URL (must be absolute)\r\n      headers: {\r\n        ...headers,\r\n        ...(token ? { authorization: `Bearer ${token}` } : {})\r\n      }\r\n    }),\r\n    cache: new InMemoryCache({\r\n      addTypename: false\r\n    })\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}