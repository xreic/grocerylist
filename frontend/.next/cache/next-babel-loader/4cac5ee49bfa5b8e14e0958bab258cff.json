{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\lib\\\\apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient'; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nlet globalApolloClient = null;\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\n\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = () => null; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\n\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\n\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  console.log('ssr');\n  console.log(ssr);\n\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx; // When redirecting, the response is finished.\n        // No point in continuing to render\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if dataFromTree is enabled\n\n\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr'); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloClient\n                })\n              };\n            } // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 35\n              }\n            })));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/lib/apollo.js"],"names":["React","App","Head","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","log","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport App from 'next/app';\r\nimport Head from 'next/head';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport createApolloClient from '../apolloClient';\r\n\r\n// On the client, we store the Apollo Client in the following variable.\r\n// This prevents the client from reinitializing between page transitions.\r\nlet globalApolloClient = null;\r\n\r\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\r\nexport const initOnContext = (ctx) => {\r\n  const inAppContext = Boolean(ctx.ctx);\r\n\r\n  // We consider installing `withApollo({ ssr: true })` on global App level\r\n  // as antipattern since it disables project wide Automatic Static Optimization.\r\n  if (process.env.NODE_ENV === 'development') {\r\n    if (inAppContext) {\r\n      console.warn(\r\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\r\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\r\n      );\r\n    }\r\n  }\r\n\r\n  // Initialize ApolloClient if not already done\r\n  const apolloClient =\r\n    ctx.apolloClient ||\r\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\r\n\r\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\r\n  // Otherwise, the component would have to call initApollo() again but this\r\n  // time without the context. Once that happens, the following code will make sure we send\r\n  // the prop as `null` to the browser.\r\n  apolloClient.toJSON = () => null;\r\n\r\n  // Add apolloClient to NextPageContext & NextAppContext.\r\n  // This allows us to consume the apolloClient inside our\r\n  // custom `getInitialProps({ apolloClient })`.\r\n  ctx.apolloClient = apolloClient;\r\n  if (inAppContext) {\r\n    ctx.ctx.apolloClient = apolloClient;\r\n  }\r\n\r\n  return ctx;\r\n};\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\r\nconst initApolloClient = (initialState, ctx) => {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initialState, ctx);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!globalApolloClient) {\r\n    globalApolloClient = createApolloClient(initialState, ctx);\r\n  }\r\n\r\n  return globalApolloClient;\r\n};\r\n\r\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\r\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\r\n  console.log('ssr');\r\n  console.log(ssr);\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n    let client;\r\n    if (apolloClient) {\r\n      // Happens on: getDataFromTree & next.js ssr\r\n      client = apolloClient;\r\n    } else {\r\n      // Happens on: next.js csr\r\n      client = initApolloClient(apolloState, undefined);\r\n    }\r\n\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <PageComponent {...pageProps} />\r\n      </ApolloProvider>\r\n    );\r\n  };\r\n\r\n  // Set the correct displayName in development\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const displayName =\r\n      PageComponent.displayName || PageComponent.name || 'Component';\r\n    WithApollo.displayName = `withApollo(${displayName})`;\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async (ctx) => {\r\n      const inAppContext = Boolean(ctx.ctx);\r\n      const { apolloClient } = initOnContext(ctx);\r\n\r\n      // Run wrapped getInitialProps methods\r\n      let pageProps = {};\r\n      if (PageComponent.getInitialProps) {\r\n        pageProps = await PageComponent.getInitialProps(ctx);\r\n      } else if (inAppContext) {\r\n        pageProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      // Only on the server:\r\n      if (typeof window === 'undefined') {\r\n        const { AppTree } = ctx;\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (ctx.res && ctx.res.finished) {\r\n          return pageProps;\r\n        }\r\n\r\n        // Only if dataFromTree is enabled\r\n        if (ssr && AppTree) {\r\n          try {\r\n            // Import `@apollo/react-ssr` dynamically.\r\n            // We don't want to have this in our client bundle.\r\n            const { getDataFromTree } = await import('@apollo/react-ssr');\r\n\r\n            // Since AppComponents and PageComponents have different context types\r\n            // we need to modify their props a little.\r\n            let props;\r\n            if (inAppContext) {\r\n              props = { ...pageProps, apolloClient };\r\n            } else {\r\n              props = { pageProps: { ...pageProps, apolloClient } };\r\n            }\r\n\r\n            // Take the Next.js AppTree, determine which queries are needed to render,\r\n            // and fetch them. This method can be pretty slow since it renders\r\n            // your entire AppTree once for every query. Check out apollo fragments\r\n            // if you want to reduce the number of rerenders.\r\n            // https://www.apollographql.com/docs/react/data/fragments/\r\n            await getDataFromTree(<AppTree {...props} />);\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error);\r\n          }\r\n\r\n          // getDataFromTree does not call componentWillUnmount\r\n          // head side effect therefore need to be cleared manually\r\n          Head.rewind();\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...pageProps,\r\n        // Extract query data from the Apollo store\r\n        apolloState: apolloClient.cache.extract(),\r\n        // Provide the client for ssr. As soon as this payload\r\n        // gets JSON.stringified it will remove itself.\r\n        apolloClient: ctx.apolloClient\r\n      };\r\n    };\r\n  }\r\n\r\n  return WithApollo;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}