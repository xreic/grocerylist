{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useContext } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Styles\n\nimport { Box, Heading, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // React\n\nimport Item from './Item';\nimport Loading from './Loading';\nimport { ShoppingContext } from '../lib/React/ShoppingContext';\nimport GroceryCheckout from './GroceryCheckout';\n\nvar GroceryList = function GroceryList() {\n  var _data$currentUserItem;\n\n  // Hooks + Contexts\n  var toast = useToast();\n\n  var _useContext = useContext(ShoppingContext),\n      isShopping = _useContext.isShopping; // Apollo\n\n\n  var _useQuery = useQuery(USERS_ITEMS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(REMOVE_ITEM_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      deleteItem = _useMutation2[0],\n      deleteResponse = _useMutation2[1]; // Handlers\n\n\n  var handleClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return deleteItem({\n                variables: {\n                  input: {\n                    id: id\n                  }\n                },\n                optimisticResponse: {\n                  __typename: 'Mutation',\n                  deleteItem: {\n                    item: {\n                      id: id\n                    }\n                  }\n                },\n                update: function update(cache, _ref2) {\n                  var deleteItem = _ref2.data.deleteItem;\n\n                  var _cache$readQuery = cache.readQuery({\n                    query: USERS_ITEMS_QUERY\n                  }),\n                      currentUserItems = _cache$readQuery.currentUserItems;\n\n                  var nodes = currentUserItems.nodes;\n                  var id = deleteItem.item.id;\n                  cache.writeQuery({\n                    query: USERS_ITEMS_QUERY,\n                    data: {\n                      currentUserItems: {\n                        nodes: nodes.filter(function (node) {\n                          return node.id !== id;\n                        })\n                      }\n                    }\n                  });\n                }\n              });\n\n            case 3:\n              _context.next = 7;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n\n    return function handleClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading) return __jsx(Loading, null);\n\n  if ((_data$currentUserItem = data.currentUserItems) === null || _data$currentUserItem === void 0 ? void 0 : _data$currentUserItem.nodes.length) {\n    var list = data.currentUserItems.nodes;\n    return __jsx(React.Fragment, null, !isShopping && __jsx(GroceryCheckout, null), __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\"\n    }, __jsx(SimpleGrid, {\n      columns: \"3\"\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Quantity\")), __jsx(Box, null, list.map(function (item) {\n      return __jsx(Item, {\n        key: item.id + item.product,\n        id: item.id,\n        product: item.product,\n        quantity: item.quantity,\n        handleClick: handleClick\n      });\n    }))));\n  } else {\n    return __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\");\n  }\n};\n\nexport default GroceryList;","map":null,"metadata":{},"sourceType":"module"}