{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Styles\n\nimport { Heading, Skeleton, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // Components\n\nimport Item from './Item';\n\nconst GroceryList = () => {\n  var _data$currentUser;\n\n  // Hooks\n  const toast = useToast(); // Apollo\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION //   , {\n  //   update(cache, { data: { deleteItem } }) {\n  //     const {\n  //       currentUser: {\n  //         itemsByOwnerId: { nodes }\n  //       }\n  //     } = cache.readQuery({ query: USERS_ITEMS_QUERY });\n  //     const { id } = deleteItem.item;\n  //     cache.writeQuery({\n  //       query: USERS_ITEMS_QUERY,\n  //       data: {\n  //         currentUser: {\n  //           itemsByOwnerId: { nodes: nodes.filter((node) => node.id !== id) }\n  //         }\n  //       }\n  //     });\n  //   }\n  // }\n  ); // Handlers\n\n  const handleClick = async id => {\n    try {\n      await deleteItem({\n        variables: {\n          input: {\n            id\n          }\n        },\n        optimisticResponse: {\n          __typename: 'Mutation',\n          deleteItem: {\n            item: id\n          }\n        }\n      });\n    } catch (error) {// need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading) return __jsx(Stack, {\n    width: \"60%\",\n    maxWidth: \"500px\",\n    minWidth: \"300px\",\n    margin: \"auto\",\n    spacing: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Loading\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"));\n\n  if ((_data$currentUser = data.currentUser) === null || _data$currentUser === void 0 ? void 0 : _data$currentUser.itemsByOwnerId.nodes.length) {\n    const list = data.currentUser.itemsByOwnerId.nodes;\n    return __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \"Quantity\")), __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, list.map(item => __jsx(Item, {\n      key: item.id + item.product,\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      handleClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\");\n  }\n};\n\nexport default GroceryList;","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useMutation","useQuery","USERS_ITEMS_QUERY","REMOVE_ITEM_MUTATION","doctorError","Heading","Skeleton","SimpleGrid","Stack","useToast","Item","GroceryList","toast","data","loading","error","deleteItem","deleteResponse","handleClick","id","variables","input","optimisticResponse","__typename","item","description","status","duration","isClosable","message","currentUser","itemsByOwnerId","nodes","length","list","map","product","quantity"],"mappings":"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","sourcesContent":["// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\n// Helpers\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError';\n\n// Styles\nimport {\n  Heading,\n  Skeleton,\n  SimpleGrid,\n  Stack,\n  useToast\n} from '@chakra-ui/core';\n\n// Components\nimport Item from './Item';\n\nconst GroceryList = () => {\n  // Hooks\n  const toast = useToast();\n\n  // Apollo\n  const { data, loading, error } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(\n    REMOVE_ITEM_MUTATION\n    //   , {\n    //   update(cache, { data: { deleteItem } }) {\n    //     const {\n    //       currentUser: {\n    //         itemsByOwnerId: { nodes }\n    //       }\n    //     } = cache.readQuery({ query: USERS_ITEMS_QUERY });\n\n    //     const { id } = deleteItem.item;\n    //     cache.writeQuery({\n    //       query: USERS_ITEMS_QUERY,\n    //       data: {\n    //         currentUser: {\n    //           itemsByOwnerId: { nodes: nodes.filter((node) => node.id !== id) }\n    //         }\n    //       }\n    //     });\n    //   }\n    // }\n  );\n\n  // Handlers\n  const handleClick = async (id) => {\n    try {\n      await deleteItem({\n        variables: { input: { id } },\n        optimisticResponse: {\n          __typename: 'Mutation',\n          deleteItem: {\n            item: id\n          }\n        }\n      });\n    } catch (error) {\n      // need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading)\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <Heading as=\"h4\" size=\"lg\">\n          Loading\n        </Heading>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n      </Stack>\n    );\n\n  if (data.currentUser?.itemsByOwnerId.nodes.length) {\n    const list = data.currentUser.itemsByOwnerId.nodes;\n\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <SimpleGrid columns=\"3\">\n          <Heading as=\"h4\" size=\"lg\">\n            Item\n          </Heading>\n          <Heading as=\"h4\" size=\"lg\">\n            Quantity\n          </Heading>\n        </SimpleGrid>\n        <SimpleGrid columns=\"3\">\n          {list.map((item) => (\n            <Item\n              key={item.id + item.product}\n              id={item.id}\n              product={item.product}\n              quantity={item.quantity}\n              handleClick={handleClick}\n            />\n          ))}\n        </SimpleGrid>\n      </Stack>\n    );\n  } else {\n    return (\n      <Heading as=\"h4\" size=\"lg\">\n        Remember to add to your list. 📝\n      </Heading>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}