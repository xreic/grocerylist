{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\lib\\\\apollo.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient'; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\n\nexport var initOnContext = function initOnContext(ctx) {\n  console.log('ssr');\n  console.log(ssr);\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = function () {\n    return null;\n  }; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\n\n\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n          apolloState = _ref2.apolloState,\n          pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n      var client;\n\n      if (apolloClient) {\n        // Happens on: getDataFromTree & next.js ssr\n        client = apolloClient;\n      } else {\n        // Happens on: next.js csr\n        client = initApolloClient(apolloState, undefined);\n      }\n\n      return __jsx(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      })));\n    }; // Set the correct displayName in development\n\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n          var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  inAppContext = Boolean(ctx.ctx);\n                  _initOnContext = initOnContext(ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                  pageProps = {};\n\n                  if (!PageComponent.getInitialProps) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return PageComponent.getInitialProps(ctx);\n\n                case 6:\n                  pageProps = _context.sent;\n                  _context.next = 13;\n                  break;\n\n                case 9:\n                  if (!inAppContext) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return App.getInitialProps(ctx);\n\n                case 12:\n                  pageProps = _context.sent;\n\n                case 13:\n                  if (!false) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  AppTree = ctx.AppTree; // When redirecting, the response is finished.\n                  // No point in continuing to render\n\n                  if (!(ctx.res && ctx.res.finished)) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", pageProps);\n\n                case 17:\n                  if (!(ssr && AppTree)) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  _context.prev = 18;\n                  _context.next = 21;\n                  return import('@apollo/react-ssr');\n\n                case 21:\n                  _yield$import = _context.sent;\n                  getDataFromTree = _yield$import.getDataFromTree;\n\n                  if (inAppContext) {\n                    props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                      apolloClient: apolloClient\n                    });\n                  } else {\n                    props = {\n                      pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                        apolloClient: apolloClient\n                      })\n                    };\n                  } // Take the Next.js AppTree, determine which queries are needed to render,\n                  // and fetch them. This method can be pretty slow since it renders\n                  // your entire AppTree once for every query. Check out apollo fragments\n                  // if you want to reduce the number of rerenders.\n                  // https://www.apollographql.com/docs/react/data/fragments/\n\n\n                  _context.next = 26;\n                  return getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 152,\n                      columnNumber: 35\n                    }\n                  })));\n\n                case 26:\n                  _context.next = 31;\n                  break;\n\n                case 28:\n                  _context.prev = 28;\n                  _context.t0 = _context[\"catch\"](18);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 31:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 32:\n                  return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                    // Extract query data from the Apollo store\n                    apolloState: apolloClient.cache.extract(),\n                    // Provide the client for ssr. As soon as this payload\n                    // gets JSON.stringified it will remove itself.\n                    apolloClient: ctx.apolloClient\n                  }));\n\n                case 33:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[18, 28]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n\n    return WithApollo;\n  };\n};","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/lib/apollo.js"],"names":["React","App","Head","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","console","log","ssr","inAppContext","Boolean","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,kBAAP,MAA+B,iBAA/B,C,CAEA;AACA;;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA;;;;;;;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACL,GAAG,CAACA,GAAL,CAA5B,CAHoC,CAKpC;AACA;;AACA,YAA4C;AAC1C,QAAII,YAAJ,EAAkB;AAChBH,MAAAA,OAAO,CAACK,IAAR,CACE,wGACE,sEAFJ;AAID;AACF,GAdmC,CAgBpC;;;AACA,MAAMC,YAAY,GAChBP,GAAG,CAACO,YAAJ,IACAC,gBAAgB,CAACR,GAAG,CAACS,WAAJ,IAAmB,EAApB,EAAwBL,YAAY,GAAGJ,GAAG,CAACA,GAAP,GAAaA,GAAjD,CAFlB,CAjBoC,CAqBpC;AACA;AACA;AACA;;AACAO,EAAAA,YAAY,CAACG,MAAb,GAAsB;AAAA,WAAM,IAAN;AAAA,GAAtB,CAzBoC,CA2BpC;AACA;AACA;;;AACAV,EAAAA,GAAG,CAACO,YAAJ,GAAmBA,YAAnB;;AACA,MAAIH,YAAJ,EAAkB;AAChBJ,IAAAA,GAAG,CAACA,GAAJ,CAAQO,YAAR,GAAuBA,YAAvB;AACD;;AAED,SAAOP,GAAP;AACD,CApCM;AAsCP;;;;;;;AAMA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACG,YAAD,EAAeX,GAAf,EAAuB;AAC9C;AACA;AACA,aAAmC;AACjC,WAAOH,kBAAkB,CAACc,YAAD,EAAeX,GAAf,CAAzB;AACD,GAL6C,CAO9C;;;AACA,MAAI,CAACF,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGD,kBAAkB,CAACc,YAAD,EAAeX,GAAf,CAAvC;AACD;;AAED,SAAOF,kBAAP;AACD,CAbD;AAeA;;;;;;;;;;AAQA,OAAO,IAAMc,UAAU,GAAG,SAAbA,UAAa;AAAA,iFAAmB,EAAnB;AAAA,sBAAGT,GAAH;AAAA,MAAGA,GAAH,yBAAS,KAAT;;AAAA,SAA0B,UAACU,aAAD,EAAmB;AACrE,QAAMC,UAAU,GAAG,SAAbA,UAAa,QAAiD;AAAA,UAA9CP,YAA8C,SAA9CA,YAA8C;AAAA,UAAhCE,WAAgC,SAAhCA,WAAgC;AAAA,UAAhBM,SAAgB;;AAClE,UAAIC,MAAJ;;AACA,UAAIT,YAAJ,EAAkB;AAChB;AACAS,QAAAA,MAAM,GAAGT,YAAT;AACD,OAHD,MAGO;AACL;AACAS,QAAAA,MAAM,GAAGR,gBAAgB,CAACC,WAAD,EAAcQ,SAAd,CAAzB;AACD;;AAED,aACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD,KAfD,CADqE,CAkBrE;;;AACA,cAA2C;AACzC,UAAMG,WAAW,GACfL,aAAa,CAACK,WAAd,IAA6BL,aAAa,CAACM,IAA3C,IAAmD,WADrD;AAEAL,MAAAA,UAAU,CAACI,WAAX,wBAAuCA,WAAvC;AACD;;AAED,QAAIf,GAAG,IAAIU,aAAa,CAACO,eAAzB,EAA0C;AACxCN,MAAAA,UAAU,CAACM,eAAX;AAAA,6EAA6B,iBAAOpB,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBI,kBAAAA,YADqB,GACNC,OAAO,CAACL,GAAG,CAACA,GAAL,CADD;AAAA,mCAEFD,aAAa,CAACC,GAAD,CAFX,EAEnBO,YAFmB,kBAEnBA,YAFmB,EAI3B;;AACIQ,kBAAAA,SALuB,GAKX,EALW;;AAAA,uBAMvBF,aAAa,CAACO,eANS;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAOPP,aAAa,CAACO,eAAd,CAA8BpB,GAA9B,CAPO;;AAAA;AAOzBe,kBAAAA,SAPyB;AAAA;AAAA;;AAAA;AAAA,uBAQhBX,YARgB;AAAA;AAAA;AAAA;;AAAA;AAAA,yBASPV,GAAG,CAAC0B,eAAJ,CAAoBpB,GAApB,CATO;;AAAA;AASzBe,kBAAAA,SATyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcjBM,kBAAAA,OAdiB,GAcLrB,GAdK,CAcjBqB,OAdiB,EAezB;AACA;;AAhByB,wBAiBrBrB,GAAG,CAACsB,GAAJ,IAAWtB,GAAG,CAACsB,GAAJ,CAAQC,QAjBE;AAAA;AAAA;AAAA;;AAAA,mDAkBhBR,SAlBgB;;AAAA;AAAA,wBAsBrBZ,GAAG,IAAIkB,OAtBc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBA0Ba,OAAO,mBAAP,CA1Bb;;AAAA;AAAA;AA0BbG,kBAAAA,eA1Ba,iBA0BbA,eA1Ba;;AA+BrB,sBAAIpB,YAAJ,EAAkB;AAChBqB,oBAAAA,KAAK,mCAAQV,SAAR;AAAmBR,sBAAAA,YAAY,EAAZA;AAAnB,sBAAL;AACD,mBAFD,MAEO;AACLkB,oBAAAA,KAAK,GAAG;AAAEV,sBAAAA,SAAS,kCAAOA,SAAP;AAAkBR,wBAAAA,YAAY,EAAZA;AAAlB;AAAX,qBAAR;AACD,mBAnCoB,CAqCrB;AACA;AACA;AACA;AACA;;;AAzCqB;AAAA,yBA0CfiB,eAAe,CAAC,MAAC,OAAD,eAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD,CA1CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4CrB;AACA;AACA;AACAxB,kBAAAA,OAAO,CAACyB,KAAR,CAAc,uCAAd;;AA/CqB;AAkDvB;AACA;AACA/B,kBAAAA,IAAI,CAACgC,MAAL;;AApDuB;AAAA,mFAyDtBZ,SAzDsB;AA0DzB;AACAN,oBAAAA,WAAW,EAAEF,YAAY,CAACqB,KAAb,CAAmBC,OAAnB,EA3DY;AA4DzB;AACA;AACAtB,oBAAAA,YAAY,EAAEP,GAAG,CAACO;AA9DO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA7B;;AAAA;AAAA;AAAA;AAAA;AAiED;;AAED,WAAOO,UAAP;AACD,GA9FyB;AAAA,CAAnB","sourcesContent":["import React from 'react';\r\nimport App from 'next/app';\r\nimport Head from 'next/head';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport createApolloClient from '../apolloClient';\r\n\r\n// On the client, we store the Apollo Client in the following variable.\r\n// This prevents the client from reinitializing between page transitions.\r\nlet globalApolloClient = null;\r\n\r\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\r\nexport const initOnContext = (ctx) => {\r\n  console.log('ssr');\r\n  console.log(ssr);\r\n  const inAppContext = Boolean(ctx.ctx);\r\n\r\n  // We consider installing `withApollo({ ssr: true })` on global App level\r\n  // as antipattern since it disables project wide Automatic Static Optimization.\r\n  if (process.env.NODE_ENV === 'development') {\r\n    if (inAppContext) {\r\n      console.warn(\r\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\r\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\r\n      );\r\n    }\r\n  }\r\n\r\n  // Initialize ApolloClient if not already done\r\n  const apolloClient =\r\n    ctx.apolloClient ||\r\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\r\n\r\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\r\n  // Otherwise, the component would have to call initApollo() again but this\r\n  // time without the context. Once that happens, the following code will make sure we send\r\n  // the prop as `null` to the browser.\r\n  apolloClient.toJSON = () => null;\r\n\r\n  // Add apolloClient to NextPageContext & NextAppContext.\r\n  // This allows us to consume the apolloClient inside our\r\n  // custom `getInitialProps({ apolloClient })`.\r\n  ctx.apolloClient = apolloClient;\r\n  if (inAppContext) {\r\n    ctx.ctx.apolloClient = apolloClient;\r\n  }\r\n\r\n  return ctx;\r\n};\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\r\nconst initApolloClient = (initialState, ctx) => {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initialState, ctx);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!globalApolloClient) {\r\n    globalApolloClient = createApolloClient(initialState, ctx);\r\n  }\r\n\r\n  return globalApolloClient;\r\n};\r\n\r\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\r\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n    let client;\r\n    if (apolloClient) {\r\n      // Happens on: getDataFromTree & next.js ssr\r\n      client = apolloClient;\r\n    } else {\r\n      // Happens on: next.js csr\r\n      client = initApolloClient(apolloState, undefined);\r\n    }\r\n\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <PageComponent {...pageProps} />\r\n      </ApolloProvider>\r\n    );\r\n  };\r\n\r\n  // Set the correct displayName in development\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const displayName =\r\n      PageComponent.displayName || PageComponent.name || 'Component';\r\n    WithApollo.displayName = `withApollo(${displayName})`;\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async (ctx) => {\r\n      const inAppContext = Boolean(ctx.ctx);\r\n      const { apolloClient } = initOnContext(ctx);\r\n\r\n      // Run wrapped getInitialProps methods\r\n      let pageProps = {};\r\n      if (PageComponent.getInitialProps) {\r\n        pageProps = await PageComponent.getInitialProps(ctx);\r\n      } else if (inAppContext) {\r\n        pageProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      // Only on the server:\r\n      if (typeof window === 'undefined') {\r\n        const { AppTree } = ctx;\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (ctx.res && ctx.res.finished) {\r\n          return pageProps;\r\n        }\r\n\r\n        // Only if dataFromTree is enabled\r\n        if (ssr && AppTree) {\r\n          try {\r\n            // Import `@apollo/react-ssr` dynamically.\r\n            // We don't want to have this in our client bundle.\r\n            const { getDataFromTree } = await import('@apollo/react-ssr');\r\n\r\n            // Since AppComponents and PageComponents have different context types\r\n            // we need to modify their props a little.\r\n            let props;\r\n            if (inAppContext) {\r\n              props = { ...pageProps, apolloClient };\r\n            } else {\r\n              props = { pageProps: { ...pageProps, apolloClient } };\r\n            }\r\n\r\n            // Take the Next.js AppTree, determine which queries are needed to render,\r\n            // and fetch them. This method can be pretty slow since it renders\r\n            // your entire AppTree once for every query. Check out apollo fragments\r\n            // if you want to reduce the number of rerenders.\r\n            // https://www.apollographql.com/docs/react/data/fragments/\r\n            await getDataFromTree(<AppTree {...props} />);\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error);\r\n          }\r\n\r\n          // getDataFromTree does not call componentWillUnmount\r\n          // head side effect therefore need to be cleared manually\r\n          Head.rewind();\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...pageProps,\r\n        // Extract query data from the Apollo store\r\n        apolloState: apolloClient.cache.extract(),\r\n        // Provide the client for ssr. As soon as this payload\r\n        // gets JSON.stringified it will remove itself.\r\n        apolloClient: ctx.apolloClient\r\n      };\r\n    };\r\n  }\r\n\r\n  return WithApollo;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}