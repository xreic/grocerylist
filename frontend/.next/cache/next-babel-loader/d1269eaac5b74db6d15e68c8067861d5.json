{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from '@apollo/react-hooks';\nimport { ALL_ITEMS_QUERY } from '../lib/queries';\nimport Item from './Item';\n\nconst GroceryList = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_ITEMS_QUERY);\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 21\n    }\n  }, \"Error: \", error);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n\n  if (data.items.nodes) {\n    const items = data.items.nodes;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, items.length > 0 && __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, items.map(item => __jsx(Item, {\n      key: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 15\n      }\n    }))));\n  }\n};\n\nexport default GroceryList;","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useQuery","ALL_ITEMS_QUERY","Item","GroceryList","data","loading","error","items","nodes","length","map","item","id","product","quantity"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BN,QAAQ,CAACC,eAAD,CAAzC;AAEA,MAAIK,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAX,CAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AAEb,MAAID,IAAI,CAACG,KAAL,CAAWC,KAAf,EAAsB;AACpB,UAAMD,KAAK,GAAGH,IAAI,CAACG,KAAL,CAAWC,KAAzB;AAEA,WACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACE,MAAN,GAAe,CAAf,IACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,KAAK,CAACG,GAAN,CAAWC,IAAD,IACT,MAAC,IAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,EADZ;AAEE,MAAA,OAAO,EAAED,IAAI,CAACE,OAFhB;AAGE,MAAA,QAAQ,EAAEF,IAAI,CAACG,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAFJ,CADF;AAeD;AACF,CAzBD;;AA2BA,eAAeX,WAAf","sourcesContent":["import { useQuery } from '@apollo/react-hooks';\nimport { ALL_ITEMS_QUERY } from '../lib/queries';\nimport Item from './Item';\n\nconst GroceryList = () => {\n  const { data, loading, error } = useQuery(ALL_ITEMS_QUERY);\n\n  if (error) return <p>Error: {error}</p>;\n  if (loading) return <p>Loading...</p>;\n\n  if (data.items.nodes) {\n    const items = data.items.nodes;\n\n    return (\n      <React.Fragment>\n        {items.length > 0 && (\n          <ul>\n            {items.map((item) => (\n              <Item\n                key={item.id}\n                product={item.product}\n                quantity={item.quantity}\n              />\n            ))}\n          </ul>\n        )}\n      </React.Fragment>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}