{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useContext } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Styles\n\nimport { Box, Heading, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // React\n\nimport Item from './Item';\nimport Loading from './Loading';\nimport { ShoppingContext } from '../lib/React/ShoppingContext';\nimport GroceryCheckout from './GroceryCheckout';\n\nconst GroceryList = () => {\n  var _data$currentUserItem;\n\n  // Hooks + Contexts\n  const toast = useToast();\n  const {\n    isShopping\n  } = useContext(ShoppingContext); // Apollo\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION); // Handlers\n\n  const handleClick = async id => {\n    try {\n      await deleteItem({\n        variables: {\n          input: {\n            id\n          }\n        },\n        optimisticResponse: {\n          __typename: 'Mutation',\n          deleteItem: {\n            item: {\n              id\n            }\n          }\n        },\n        update: (cache, {\n          data: {\n            deleteItem\n          }\n        }) => {\n          const {\n            currentUserItems\n          } = cache.readQuery({\n            query: USERS_ITEMS_QUERY\n          });\n          const {\n            nodes\n          } = currentUserItems;\n          const {\n            id\n          } = deleteItem.item;\n          cache.writeQuery({\n            query: USERS_ITEMS_QUERY,\n            data: {\n              currentUserItems: {\n                nodes: nodes.filter(node => node.id !== id)\n              }\n            }\n          });\n        }\n      });\n    } catch (error) {// need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading) return __jsx(Loading, null);\n\n  if ((_data$currentUserItem = data.currentUserItems) === null || _data$currentUserItem === void 0 ? void 0 : _data$currentUserItem.nodes.length) {\n    const list = data.currentUserItems.nodes;\n    return __jsx(React.Fragment, null, !isShopping && __jsx(GroceryCheckout, null), __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\"\n    }, __jsx(SimpleGrid, {\n      columns: \"3\"\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Quantity\")), __jsx(Box, null, list.map(item => __jsx(Item, {\n      key: item.id + item.product,\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      handleClick: handleClick\n    })))));\n  } else {\n    return __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\"\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\");\n  }\n};\n\nexport default GroceryList;","map":null,"metadata":{},"sourceType":"module"}