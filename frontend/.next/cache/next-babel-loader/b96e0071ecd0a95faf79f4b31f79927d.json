{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// Dependencies\nimport { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Cookies from 'js-cookie';\nimport { Button, Flex, Heading, InputGroup, InputRightElement, SimpleGrid, Stack } from '@chakra-ui/core'; // Styles\n\nimport { AiOutlineForm, AiOutlineDoubleLeft } from 'react-icons/ai';\nimport { FiLogIn } from 'react-icons/fi';\nimport { StyledButton, StyledInput, StyledInputPW } from './styles/styled'; // Helpers\n\nimport { REGISTER_USER_MUTATION, SIGNIN_USER_MUTATION } from '../lib/mutations';\n\nconst SignInForm = () => {\n  // Form Refs\n  const emailRef = useRef('123@123.com');\n  const nameRef = useRef('123');\n  const passwordRef = useRef('123');\n  const passwordConfirmationRef = useRef('123'); // Hooks\n\n  const {\n    0: status,\n    1: setStatus\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: showPassword,\n    1: setShow\n  } = useState(false);\n  const {\n    0: registering,\n    1: setRegistering\n  } = useState(false); // Apollo\n\n  const [register, registerRes] = useMutation(REGISTER_USER_MUTATION);\n  const [signin, signinRes] = useMutation(SIGNIN_USER_MUTATION);\n\n  const toggleRegister = () => {\n    setShow(!showPassword);\n  };\n\n  const handleSubmit = async e => {\n    setStatus(true);\n    e.preventDefault();\n    const email = emailRef.current.value;\n    const password = passwordRef.current.value;\n\n    if (registering) {\n      const displayname = nameRef.current.value;\n      const confirmpassword = passwordConfirmationRef.current.value;\n\n      try {\n        await register({\n          variables: {\n            input: {\n              email,\n              displayname,\n              password,\n              confirmpassword\n            }\n          }\n        });\n        const tokenRes = await signin({\n          variables: {\n            input: {\n              email,\n              password\n            }\n          }\n        });\n        setError('');\n        Cookies.set('grocerylist_auth_token', tokenRes.data.authenticate.jwtToken);\n      } catch (error) {\n        setError(error.message.replace('GraphQL error: ', ''));\n      }\n    } else {\n      try {\n        const tokenRes = await signin({\n          variables: {\n            input: {\n              email,\n              password\n            }\n          }\n        });\n        setError('');\n        Cookies.set('grocerylist_auth_token', tokenRes.data.authenticate.jwtToken);\n      } catch (error) {\n        setError(error.message.replace('GraphQL error: ', ''));\n      }\n    }\n\n    setStatus(false);\n  };\n\n  return __jsx(Stack, {\n    spacing: \"0.5rem\",\n    paddingBottom: \"2rem\"\n  }, error !== '' && __jsx(Heading, {\n    as: \"h5\",\n    size: \"sm\",\n    color: \"red.600\"\n  }, error), __jsx(Flex, {\n    justify: \"center\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    minWidth: \"300px\",\n    maxWidth: \"400px\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(StyledInput, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    ref: emailRef,\n    isDisabled: status\n  }), registering && __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Enter display name\",\n    ref: nameRef,\n    isDisabled: status\n  }), __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Enter password\",\n    ref: passwordRef,\n    isDisabled: status,\n    error: error\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: toggleRegister\n  }, showPassword ? 'Hide' : 'Show'))), registering && __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Confirm password\",\n    ref: passwordConfirmationRef,\n    isDisabled: status,\n    error: error\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: toggleRegister\n  }, showPassword ? 'Hide' : 'Show'))), __jsx(SimpleGrid, {\n    columns: \"2\",\n    gridGap: \"5px\"\n  }, __jsx(StyledButton, {\n    variantColor: \"blue\",\n    icon: registering ? AiOutlineDoubleLeft : AiOutlineForm,\n    isLoading: status,\n    isDisabled: status,\n    \"aira-busy\": status,\n    \"aria-label\": \"Register for an account\",\n    onClick: () => setRegistering(!registering)\n  }), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: FiLogIn,\n    isLoading: status,\n    isDisabled: status,\n    \"aira-busy\": status,\n    \"aria-label\": \"Log into your account\"\n  })))));\n};\n\nexport default SignInForm;","map":null,"metadata":{},"sourceType":"module"}