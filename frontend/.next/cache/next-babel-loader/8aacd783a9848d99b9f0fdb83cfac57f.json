{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Dependencies\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport Router from 'next/router';\nimport { useMutation } from '@apollo/react-hooks'; // Styles\n\nimport { Box, Flex, Grid, IconButton, Stack } from '@chakra-ui/core';\nimport { MdAddShoppingCart, MdReceipt } from 'react-icons/md'; // Helpers\n\nimport { ADD_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { StyledButton, StyledInput } from './styles/styled'; // Contexts\n\nimport { UserContext } from '../lib/React/UserContext';\nimport { ViewContext } from '../lib/React/ViewContext';\n\nconst GroceryForm = () => {\n  // Form Refs\n  const productRef = useRef('');\n  const quantityRef = useRef(''); // Hooks\n\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const {\n    isAdd,\n    setIsAdd\n  } = useContext(ViewContext);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(false); // Apollo\n\n  const [addItem, itemRes] = useMutation(ADD_ITEM_MUTATION); // useEffect\n\n  useEffect(() => {\n    if (!user) Router.push('/signin');\n  }, [user]); // Handleres\n\n  const handleClick = () => {\n    setIsAdd(!isAdd);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setStatus(true);\n    const input = {\n      product: productRef.current.value,\n      quantity: parseInt(quantityRef.current.value)\n    };\n    addItem({\n      variables: {\n        input\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        addItem: {\n          item: _objectSpread(_objectSpread({\n            id: Math.round(Math.random() * -1000000)\n          }, input), {}, {\n            status: false\n          })\n        }\n      },\n      update: (cache, {\n        data: {\n          addItem\n        }\n      }) => {\n        const {\n          currentUser\n        } = cache.readQuery({\n          query: USERS_ITEMS_QUERY\n        });\n        const {\n          nodes\n        } = currentUser.itemsByOwnerId;\n        const {\n          item\n        } = addItem;\n        cache.writeQuery({\n          query: USERS_ITEMS_QUERY,\n          data: {\n            currentUser: {\n              itemsByOwnerId: {\n                nodes: [item, ...nodes]\n              }\n            }\n          }\n        });\n      }\n    });\n    setStatus(false);\n    productRef.current.value = '';\n    quantityRef.current.value = '';\n    productRef.current.focus();\n  };\n\n  return __jsx(Stack, {\n    spacing: \"2rem\",\n    paddingBottom: \"2rem\"\n  }, isAdd ? __jsx(IconButton, {\n    variantColor: \"blue\",\n    icon: MdAddShoppingCart,\n    width: \"65%\",\n    maxWidth: \"300px\",\n    alignSelf: \"center\",\n    onClick: handleClick,\n    \"aria-label\": \"Check to switch from add to remove\"\n  }) : __jsx(IconButton, {\n    variantColor: \"blue\",\n    icon: MdReceipt,\n    width: \"65%\",\n    maxWidth: \"300px\",\n    alignSelf: \"center\",\n    onClick: handleClick,\n    \"aria-label\": \"Check to switch from remove to add\"\n  }), isAdd && __jsx(Flex, {\n    justify: \"center\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    templateColumns: \"5fr 1fr\"\n  }, __jsx(Box, null, __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Product\",\n    isDisabled: status,\n    ref: productRef\n  }), __jsx(StyledInput, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    isDisabled: status,\n    ref: quantityRef\n  })), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: MdAddShoppingCart,\n    isLoading: status,\n    isDisabled: status,\n    \"aira-busy\": status,\n    height: true\n  })))));\n};\n\nexport default GroceryForm;","map":null,"metadata":{},"sourceType":"module"}