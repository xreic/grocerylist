{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { ALL_ITEMS_QUERY } from '../lib/apollo/queries'; // Styles\n\nimport { List, ListItem, SimpleGrid, Heading } from '@chakra-ui/core'; // Components\n\nimport Item from './Item';\n\nconst GroceryList = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_ITEMS_QUERY);\n  const [deleteItem, deleteRes] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, {\n      data: {\n        deleteItem\n      }\n    }) {\n      const {\n        items: {\n          nodes\n        }\n      } = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      });\n      const {\n        id\n      } = deleteItem.item;\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data: {\n          items: {\n            nodes: nodes.filter(node => node.id !== id)\n          }\n        }\n      });\n    }\n\n  });\n\n  const handleClick = id => {\n    deleteItem({\n      variables: {\n        input: {\n          id\n        }\n      }\n    });\n  };\n\n  if (error) console.log(JSON.parse(JSON.stringify(error)));\n  console.log('data');\n  console.log(data);\n\n  if (!loading && !error && data.items && data.items.length > 0) {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, __jsx(List, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, __jsx(ListItem, {\n      paddingBottom: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, \"Quantity\"))), data.items.map(item => __jsx(Item, {\n      key: item.id + item.product,\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      handleClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, \"No groceries.\"));\n  }\n};\n\nexport default GroceryList;","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useMutation","useQuery","REMOVE_ITEM_MUTATION","ALL_ITEMS_QUERY","List","ListItem","SimpleGrid","Heading","Item","GroceryList","data","loading","error","deleteItem","deleteRes","update","cache","items","nodes","readQuery","query","id","item","writeQuery","filter","node","handleClick","variables","input","console","log","JSON","parse","stringify","length","map","product","quantity"],"mappings":"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","sourcesContent":["// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\n// Helpers\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { ALL_ITEMS_QUERY } from '../lib/apollo/queries';\n\n// Styles\nimport { List, ListItem, SimpleGrid, Heading } from '@chakra-ui/core';\n\n// Components\nimport Item from './Item';\n\nconst GroceryList = () => {\n  const { data, loading, error } = useQuery(ALL_ITEMS_QUERY);\n  const [deleteItem, deleteRes] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, { data: { deleteItem } }) {\n      const {\n        items: { nodes }\n      } = cache.readQuery({ query: ALL_ITEMS_QUERY });\n\n      const { id } = deleteItem.item;\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data: { items: { nodes: nodes.filter((node) => node.id !== id) } }\n      });\n    }\n  });\n\n  const handleClick = (id) => {\n    deleteItem({ variables: { input: { id } } });\n  };\n\n  if (error) console.log(JSON.parse(JSON.stringify(error)));\n\n  console.log('data');\n  console.log(data);\n\n  if (!loading && !error && data.items && data.items.length > 0) {\n    return (\n      <React.Fragment>\n        {/* <p>Error: {error.message}</p> */}\n        <List width=\"60%\" maxWidth=\"500px\" minWidth=\"300px\" margin=\"auto\">\n          <ListItem paddingBottom=\"0.5rem\">\n            <SimpleGrid columns=\"3\">\n              <Heading as=\"h4\" size=\"lg\">\n                Item\n              </Heading>\n              <Heading as=\"h4\" size=\"lg\">\n                Quantity\n              </Heading>\n            </SimpleGrid>\n          </ListItem>\n          {data.items.map((item) => (\n            <Item\n              key={item.id + item.product}\n              id={item.id}\n              product={item.product}\n              quantity={item.quantity}\n              handleClick={handleClick}\n            />\n          ))}\n        </List>\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        {/* <p>Error: {error.message}</p> */}\n        <Heading as=\"h4\" size=\"lg\">\n          No groceries.\n        </Heading>\n      </React.Fragment>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}