{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport App from '../components/App';\nimport Header from '../components/Header';\n\nvar AboutPage = function AboutPage() {\n  return __jsx(App, null, __jsx(Header, null), __jsx(\"article\", null, __jsx(\"h1\", null, \"The Idea Behind This Example\"), __jsx(\"p\", null, __jsx(\"a\", {\n    href: \"https://www.apollographql.com/client/\"\n  }, \"Apollo\"), \" is a GraphQL client that allows you to easily query the exact data you need from a GraphQL server. In addition to fetching and mutating data, Apollo analyzes your queries and their results to construct a client-side cache of your data, which is kept up to date as further queries and mutations are run, fetching more results from the server.\"), __jsx(\"p\", null, \"In this simple example, we integrate Apollo seamlessly with\", ' ', __jsx(\"a\", {\n    href: \"https://github.com/zeit/next.js\"\n  }, \"Next\"), \" by wrapping our Page component inside a\", ' ', __jsx(\"a\", {\n    href: \"https://facebook.github.io/react/docs/higher-order-components.html\"\n  }, \"higher-order component (HOC)\"), \". Using the HOC pattern we're able to pass down a central store of query result data created by Apollo into our React component hierarchy defined inside a page of our Next application.\"), __jsx(\"p\", null, \"On initial page load, while on the server and inside getInitialProps, we invoke the Apollo method,\", ' ', __jsx(\"a\", {\n    href: \"https://www.apollographql.com/docs/react/api/react-ssr/#getdatafromtree\"\n  }, \"getDataFromTree\"), \". This method returns a promise; at the point in which the promise resolves, our Apollo Client store is completely initialized.\"), __jsx(\"p\", null, \"This example relies on \", __jsx(\"a\", {\n    href: \"http://graph.cool\"\n  }, \"graph.cool\"), \" for its GraphQL backend.\")));\n};\n\nexport default AboutPage;","map":null,"metadata":{},"sourceType":"module"}