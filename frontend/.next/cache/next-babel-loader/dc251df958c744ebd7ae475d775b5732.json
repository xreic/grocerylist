{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\Projects\\\\Grocery List\\\\frontend\\\\components\\\\GroceryList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks'; // Helpers\n\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError'; // Styles\n\nimport { Heading, Skeleton, SimpleGrid, Stack, useToast } from '@chakra-ui/core'; // Components\n\nimport Item from './Item';\n\nconst GroceryList = () => {\n  var _data$currentUser;\n\n  // Hooks\n  const toast = useToast(); // Apollo\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, {\n      data: {\n        deleteItem\n      }\n    }) {\n      const {\n        currentUser: {\n          itemsByOwnerId: {\n            nodes\n          }\n        }\n      } = cache.readQuery({\n        query: USERS_ITEMS_QUERY\n      });\n      console.log('nodes');\n      console.log(nodes);\n      const {\n        id\n      } = deleteItem.item; // cache.writeQuery({\n      //   query: USERS_ITEMS_QUERY,\n      //   data: { items: { nodes: nodes.filter((node) => node.id !== id) } }\n      // });\n    }\n\n  }); // Handlers\n\n  const handleClick = async id => {\n    try {\n      console.log('id');\n      console.log(id);\n      await deleteItem({\n        variables: {\n          input: {\n            id\n          }\n        }\n      });\n    } catch (error) {// need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading) return __jsx(Stack, {\n    width: \"60%\",\n    maxWidth: \"500px\",\n    minWidth: \"300px\",\n    margin: \"auto\",\n    spacing: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Loading\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"), __jsx(Skeleton, {\n    borderRadius: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Placeholder\"));\n\n  if ((_data$currentUser = data.currentUser) === null || _data$currentUser === void 0 ? void 0 : _data$currentUser.itemsByOwnerId.nodes.length) {\n    const list = data.currentUser.itemsByOwnerId.nodes;\n    console.log(list);\n    return __jsx(Stack, {\n      width: \"60%\",\n      maxWidth: \"500px\",\n      minWidth: \"300px\",\n      margin: \"auto\",\n      spacing: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \"Item\"), __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"Quantity\")), __jsx(SimpleGrid, {\n      columns: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, list.map(item => __jsx(Item, {\n      key: item.id + item.product,\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n      handleClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return __jsx(Heading, {\n      as: \"h4\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, \"Remember to add to your list. \\uD83D\\uDCDD\");\n  }\n};\n\nexport default GroceryList;","map":{"version":3,"sources":["F:/Work/Projects/Grocery List/frontend/components/GroceryList.js"],"names":["useMutation","useQuery","USERS_ITEMS_QUERY","REMOVE_ITEM_MUTATION","doctorError","Heading","Skeleton","SimpleGrid","Stack","useToast","Item","GroceryList","toast","data","loading","error","deleteItem","deleteResponse","update","cache","currentUser","itemsByOwnerId","nodes","readQuery","query","console","log","id","item","handleClick","variables","input","description","status","duration","isClosable","message","length","list","map","product","quantity"],"mappings":"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","sourcesContent":["// Dependnencies\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\n// Helpers\nimport { USERS_ITEMS_QUERY } from '../lib/apollo/queries';\nimport { REMOVE_ITEM_MUTATION } from '../lib/apollo/mutations';\nimport { doctorError } from '../lib/doctorError';\n\n// Styles\nimport {\n  Heading,\n  Skeleton,\n  SimpleGrid,\n  Stack,\n  useToast\n} from '@chakra-ui/core';\n\n// Components\nimport Item from './Item';\n\nconst GroceryList = () => {\n  // Hooks\n  const toast = useToast();\n\n  // Apollo\n  const { data, loading, error } = useQuery(USERS_ITEMS_QUERY);\n  const [deleteItem, deleteResponse] = useMutation(REMOVE_ITEM_MUTATION, {\n    update(cache, { data: { deleteItem } }) {\n      const {\n        currentUser: {\n          itemsByOwnerId: { nodes }\n        }\n      } = cache.readQuery({ query: USERS_ITEMS_QUERY });\n\n      console.log('nodes');\n      console.log(nodes);\n\n      const { id } = deleteItem.item;\n      // cache.writeQuery({\n      //   query: USERS_ITEMS_QUERY,\n      //   data: { items: { nodes: nodes.filter((node) => node.id !== id) } }\n      // });\n    }\n  });\n\n  // Handlers\n  const handleClick = async (id) => {\n    try {\n      console.log('id');\n      console.log(id);\n      await deleteItem({ variables: { input: { id } } });\n    } catch (error) {\n      // need to catch the error, so a popup doesn't show up\n    }\n  };\n\n  if (error || deleteResponse.error) {\n    if (!!error) {\n      toast({\n        description: error,\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n\n    if (!!deleteResponse.error) {\n      toast({\n        description: doctorError(deleteResponse.error.message),\n        status: 'error',\n        duration: 9001,\n        isClosable: true\n      });\n    }\n  }\n\n  if (loading)\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <Heading as=\"h4\" size=\"lg\">\n          Loading\n        </Heading>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n        <Skeleton borderRadius=\"1rem\">Placeholder</Skeleton>\n      </Stack>\n    );\n\n  if (data.currentUser?.itemsByOwnerId.nodes.length) {\n    const list = data.currentUser.itemsByOwnerId.nodes;\n    console.log(list);\n\n    return (\n      <Stack\n        width=\"60%\"\n        maxWidth=\"500px\"\n        minWidth=\"300px\"\n        margin=\"auto\"\n        spacing=\"0.5rem\"\n      >\n        <SimpleGrid columns=\"3\">\n          <Heading as=\"h4\" size=\"lg\">\n            Item\n          </Heading>\n          <Heading as=\"h4\" size=\"lg\">\n            Quantity\n          </Heading>\n        </SimpleGrid>\n        <SimpleGrid columns=\"3\">\n          {list.map((item) => (\n            <Item\n              key={item.id + item.product}\n              id={item.id}\n              product={item.product}\n              quantity={item.quantity}\n              handleClick={handleClick}\n            />\n          ))}\n        </SimpleGrid>\n      </Stack>\n    );\n  } else {\n    return (\n      <Heading as=\"h4\" size=\"lg\">\n        Remember to add to your list. 📝\n      </Heading>\n    );\n  }\n};\n\nexport default GroceryList;\n"]},"metadata":{},"sourceType":"module"}