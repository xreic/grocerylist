{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Dependencies\nimport { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Cookies from 'js-cookie';\nimport { Button, Flex, Heading, InputGroup, InputRightElement, SimpleGrid, Stack } from '@chakra-ui/core'; // Styles\n\nimport { AiOutlineForm, AiOutlineDoubleLeft } from 'react-icons/ai';\nimport { FiLogIn } from 'react-icons/fi';\nimport { StyledButton, StyledInput, StyledInputPW } from './styles/styled'; // Helpers\n\nimport { REGISTER_USER_MUTATION, SIGNIN_USER_MUTATION } from '../lib/mutations';\n\nvar SignInForm = function SignInForm() {\n  // Form Refs\n  var emailRef = useRef('123@123.com');\n  var nameRef = useRef('123');\n  var passwordRef = useRef('123');\n  var passwordConfirmationRef = useRef('123'); // Hooks\n\n  var _useState = useState(false),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      showPassword = _useState3[0],\n      setShow = _useState3[1];\n\n  var _useState4 = useState(false),\n      registering = _useState4[0],\n      setRegistering = _useState4[1]; // Apollo\n\n\n  var _useMutation = useMutation(REGISTER_USER_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      register = _useMutation2[0],\n      registerRes = _useMutation2[1];\n\n  var _useMutation3 = useMutation(SIGNIN_USER_MUTATION),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      signin = _useMutation4[0],\n      signinRes = _useMutation4[1];\n\n  var toggleRegister = function toggleRegister() {\n    setShow(!showPassword);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var email, password, displayname, confirmpassword, tokenRes, _tokenRes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setStatus(true);\n              e.preventDefault();\n              email = emailRef.current.value;\n              password = passwordRef.current.value;\n\n              if (!registering) {\n                _context.next = 22;\n                break;\n              }\n\n              displayname = nameRef.current.value;\n              confirmpassword = passwordConfirmationRef.current.value;\n              _context.prev = 7;\n              _context.next = 10;\n              return register({\n                variables: {\n                  input: {\n                    email: email,\n                    displayname: displayname,\n                    password: password,\n                    confirmpassword: confirmpassword\n                  }\n                }\n              });\n\n            case 10:\n              _context.next = 12;\n              return signin({\n                variables: {\n                  input: {\n                    email: email,\n                    password: password\n                  }\n                }\n              });\n\n            case 12:\n              tokenRes = _context.sent;\n              setError('');\n              Cookies.set('grocerylist_auth_token', tokenRes.data.authenticate.jwtToken);\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](7);\n              setError(_context.t0.message.replace('GraphQL error: ', ''));\n\n            case 20:\n              _context.next = 33;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.next = 25;\n              return signin({\n                variables: {\n                  input: {\n                    email: email,\n                    password: password\n                  }\n                }\n              });\n\n            case 25:\n              _tokenRes = _context.sent;\n              setError('');\n              Cookies.set('grocerylist_auth_token', _tokenRes.data.authenticate.jwtToken);\n              _context.next = 33;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t1 = _context[\"catch\"](22);\n              setError(_context.t1.message.replace('GraphQL error: ', ''));\n\n            case 33:\n              setStatus(false);\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 17], [22, 30]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Stack, {\n    spacing: \"0.5rem\",\n    paddingBottom: \"2rem\"\n  }, error !== '' && __jsx(Heading, {\n    as: \"h5\",\n    size: \"sm\",\n    color: \"red.600\"\n  }, error), __jsx(Flex, {\n    justify: \"center\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    minWidth: \"300px\",\n    maxWidth: \"400px\"\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(StyledInput, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    ref: emailRef,\n    isDisabled: status\n  }), registering && __jsx(StyledInput, {\n    type: \"text\",\n    placeholder: \"Enter display name\",\n    ref: nameRef,\n    isDisabled: status\n  }), __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Enter password\",\n    ref: passwordRef,\n    isDisabled: status,\n    error: error\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: toggleRegister\n  }, showPassword ? 'Hide' : 'Show'))), registering && __jsx(InputGroup, {\n    size: \"md\"\n  }, __jsx(StyledInputPW, {\n    pr: \"4.5rem\",\n    type: showPassword ? 'text' : 'password',\n    placeholder: \"Confirm password\",\n    ref: passwordConfirmationRef,\n    isDisabled: status,\n    error: error\n  }), __jsx(InputRightElement, {\n    width: \"4.5rem\"\n  }, __jsx(Button, {\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: toggleRegister\n  }, showPassword ? 'Hide' : 'Show'))), __jsx(SimpleGrid, {\n    columns: \"2\",\n    gridGap: \"5px\"\n  }, __jsx(StyledButton, {\n    variantColor: \"blue\",\n    icon: registering ? AiOutlineDoubleLeft : AiOutlineForm,\n    isLoading: status,\n    isDisabled: status,\n    \"aira-busy\": status,\n    \"aria-label\": \"Register for an account\",\n    onClick: function onClick() {\n      return setRegistering(!registering);\n    }\n  }), __jsx(StyledButton, {\n    type: \"submit\",\n    variantColor: \"blue\",\n    icon: FiLogIn,\n    isLoading: status,\n    isDisabled: status,\n    \"aira-busy\": status,\n    \"aria-label\": \"Log into your account\"\n  })))));\n};\n\nexport default SignInForm;","map":null,"metadata":{},"sourceType":"module"}